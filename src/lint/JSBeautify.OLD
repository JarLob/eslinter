package lint;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.mozilla.javascript.*;

import burp.BurpExtender;
import utils.Exceptions;

import static burp.BurpExtender.callbacks;

/**
 * JSBeautify
 */
public class JSBeautify {

    private static final String EMPTY_STRING = "";

    private static Scriptable scope = null;
    private static Context cx = null;
    private static Function beautifyFunction = null;

    public static void beautifyFile(String inFilePath, String outFilePath) {
        try {
            // Read the file.
            File inFile = new File(inFilePath);
            String fileContent = FileUtils.readFileToString(inFile, "UTF-8");
            String beautified = beautify(fileContent);
            if (beautified == EMPTY_STRING) return;

            File outFile = new File(outFilePath);
            FileUtils.writeStringToFile(outFile, beautified, "UTF-8");
            callbacks.printOutput("Beautified " + inFile + " and stored it in " + outFile);
        } catch (IOException e) {
            //TODO: handle exception
            Exceptions.printStackTrace(e);
        } catch (BeautifyNotFound e) {
            //TODO: handle exception
            Exceptions.printStackTrace(e);
        }
    }

    public static String beautify(String minJS) throws IOException, BeautifyNotFound {
        // Following this tutorial
        // https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Embedding_tutorial

        if (minJS == EMPTY_STRING) return EMPTY_STRING;
        if (minJS == null) return EMPTY_STRING;

        String result = EMPTY_STRING;

        try {
            // Enter a context.
            cx = Context.enter();
            // Seems like it's not needed anymore.
            // cx.setOptimizationLevel(-1);
            // Initialize standard objects.
            scope = cx.initSafeStandardObjects();
            // Read beautify.js.
            String jsbeautifyFile = utils.Resources.getResourceFile(BurpExtender.class, "/beautify.js");
            // Add it to scope.
            // TODO Can we speed it up by compiling the string and adding the
            // class files directly?
            cx.evaluateString(scope, jsbeautifyFile, "beautify.js", 0, null);

            Object beautifyFuncObject = scope.get("beautify", scope);
            if (!(beautifyFuncObject instanceof Function)) {
                // callbacks.printError("beautify is undefined or not a function.");
                // callbacks.printError(beautifyFuncObject.toString());
                // If this happens we want to redo the scope.
                scope = null;
                throw new BeautifyNotFound("beautify is undefined or not a function, it's " + beautifyFuncObject.toString());
            } else {
                beautifyFunction = (Function)beautifyFuncObject;
            }

            // Pass the minified JavaScript.
            Object functionArgs[] = { minJS };
            Object rst = beautifyFunction.call(cx, scope, scope, functionArgs);
            result = Context.toString(rst);
        } catch (Exception e) {
            //TODO: handle exception
        } finally {
            Context.exit();
        }
        return result;
    }
}